
// 元の値からビットの長さを取得する
int getBitLengthNum(int value)
{
    int absValue = (int)abs(value);
    if(absValue == 0)
    {
        return 0;
    }
    else
    {
        return (int)log2(absValue) + 1;
    }
}

// 元の値からカテゴリを取得する
// もとの値がnbitのとき、カテゴリはn、付加ビットもn（nbit目は＋であれば1である）
int getCategory(int value)
{
    if(value == 0)
    {
        return 0;
    }
    else
    {
        return getBitLengthNum(value);
    }
}

// 値から追加bitを求める
// 追加bitはcategory - 1 bit(0の場合はなし)のbit数
int getAdditionalBit(int value, int category)
{
    int additionalBit;
    if(value == 0)
    {
        additionalBit = 0;
    }
    else if(value > 0)
    {
        // 各カテゴリの小さい値を0とする
        additionalBit = value;
    }
    else
    {
        // 各カテゴリの小さい値を0とする
        additionalBit = (int)(pow(2, category) - 1) + value;
    }
    return additionalBit;
}

// 追加bitから値を求める
int fromAdditionalBit(int additionalBit, int category)
{
    int value;
    if(category == 0)
    {
        value = 0;
    }
    else if(floor(additionalBit / pow(2, category - 1)) == 1)
    {
        // 正の値
        value = additionalBit;
    }
    else
    {
        // 負の値
        value = (int)(additionalBit - (int)(pow(2, category) - 1));
    }
    return value;
}


#define AC_Y_INV_HUFFMAN_MAXCODE_TABLE_SIZE 15
#define AC_C_INV_HUFFMAN_MAXCODE_TABLE_SIZE 15
#define DC_Y_INV_HUFFMAN_MAXCODE_TABLE_SIZE 8
#define DC_C_INV_HUFFMAN_MAXCODE_TABLE_SIZE 10

// YのACのhuffmanの各bit数での最小値のindexを求める
// Code
// bit数（index）は2=0となる
int getACYInvHuffmanValptrData(int bitNum)
{
    int AC_Y_INV_HUFFMAN_VALPTR_TABLE[] = 
    {
        0,
        2,
        3,
        6,
        9,
        11,
        15,
        18,
        23,
        28,
        32,
        0,
        0,
        36,
        37
    };
    return AC_Y_INV_HUFFMAN_VALPTR_TABLE[bitNum];
}

// YのACのhuffmanの各bit数での最小値を求める
int getACYInvHuffmanMincodeData(int bitNum)
{
    int AC_Y_INV_HUFFMAN_MINCODE_TABLE[] = 
    {
        0,      //0b00
        4,      //0b100
        10,     //0b1010
        26,     //0b11010
        58,     //0b111010
        120,    //0b1111000
        248,    //0b11111000
        502,    //0b111110110
        1014,   //0b1111110110
        2038,   //0b11111110110
        4084,   //0b111111110100
        0,      //0b0
        0,      //0b0
        32704,  //0b111111111000000
        65410   //0b1111111110000010
    };
    
    return AC_Y_INV_HUFFMAN_MINCODE_TABLE[bitNum];
}

// YのACのhuffmanの各bit数での最大値を求める
int getACYInvHuffmanMaxcodeData(int bitNum)
{
    int AC_Y_INV_HUFFMAN_MAXCODE_TABLE[] = 
    {
        1,      //0b01
        4,      //0b100
        12,     //0b1100
        28,     //0b11100
        59,     //0b111011
        123,    //0b1111011
        250,    //0b11111010
        506,    //0b111111010
        1018,   //0b1111111010
        2041,   //0b11111111001
        4087,   //0b111111110111
        0,      //0b0
        0,      //0b0
        32704,  //0b111111111000000
        65534  //0b1111111111111110

    };
    // bit数（index）は2=0となる
    return AC_Y_INV_HUFFMAN_MAXCODE_TABLE[bitNum];
}

// CのACのhuffmanの各bit数での最小値のindexを求める
// Code
// bit数（index）は2=0となる
int getACCInvHuffmanValptrData(int bitNum)
{
    int AC_C_INV_HUFFMAN_VALPTR_TABLE[] = 
    {
        0,
        2,
        3,
        5,
        9,
        13,
        16,
        20,
        27,
        32,
        36,
        0,
        40,
        41,
        43
    };
    return AC_C_INV_HUFFMAN_VALPTR_TABLE[bitNum];
}

// CのACのhuffmanの各bit数での最小値を求める
int getACCInvHuffmanMincodeData(int bitNum)
{
    int AC_C_INV_HUFFMAN_MINCODE_TABLE[] = 
    {
        0,      //0b00
        4,      //0b100
        10,     //0b1010
        24,     //0b11000
        56,     //0b111000
        120,    //0b1111000
        246,    //0b11110110
        500,    //0b111110100
        1014,   //0b1111110110
        2038,   //0b11111110110
        4084,   //0b111111110100
        0,      //0b0
        16352,  //0b11111111100000
        32706,  //0b111111111000010
        65416   //0b1111111110001000
    };
    return AC_C_INV_HUFFMAN_MINCODE_TABLE[bitNum];
}

// CのACのhuffmanの各bit数での最大値を求める
int getACCInvHuffmanMaxcodeData(int bitNum)
{
    int AC_C_INV_HUFFMAN_MAXCODE_TABLE[] = 
    {
        1,      //0b01
        4,      //0b100
        11,     //0b1011
        27,     //0b11011
        59,     //0b111011
        122,    //0b1111010
        249,    //0b11111001
        506,    //0b111111010
        1018,   //0b1111111010
        2041,   //0b11111111001
        4087,   //0b111111110111
        0,      //0b0
        16352,  //0b11111111100000
        32707,  //0b111111111000011
        65534   //0b1111111111111110
    };
    // bit数（index）は2=0となる
    return AC_C_INV_HUFFMAN_MAXCODE_TABLE[bitNum];
}

// YのDCのhuffmanの値を求める
int getDCYHuffmanData(int category)
{
    // 0の場合2桁、それ以外は最低3桁
    int DC_Y_HUFFMAN_TABLE[] = 
    {
        0,      // 0b00
        2,      // 0b010
        3,      // 0b011
        4,      // 0b100
        5,      // 0b101
        6,      // 0b110
        14,     // 0b1110
        30,     // 0b11110
        62,     // 0b111110
        126,    // 0b1111110
        254,    // 0b11111110
        510,    // 0b111111110
    };
    return DC_Y_HUFFMAN_TABLE[category];
}
// YのDCのHuffmanのbit数を取得する
// 0のとき2bit、それ以外のとき最低3bit
int getDCYHuffmanSize(int huffmanValue)
{
    int size = getBitLengthNum(huffmanValue);
    return size == 0 ? 2 : (size < 3 ? 3: size);
}

// CのDCのhuffmanの値を求める
int getDCCHuffmanData(int category)
{
    // 最低2桁
    int DC_C_HUFFMAN_TABLE[] = 
    {
        0,      // 0b00
        1,      // 0b01
        2,      // 0b10
        6,      // 0b110
        14,     // 0b1110
        30,     // 0b11110
        62,     // 0b111110
        126,    // 0b1111110
        254,    // 0b11111110
        510,    // 0b111111110
        1022,   // 0b1111111110
        2046,   // 0b11111111110
    };
    return DC_C_HUFFMAN_TABLE[category];
}
// CのDCのHuffmanのbit数を取得する
// 最低2bit
int getDCCHuffmanSize(int huffmanValue)
{
    int size = getBitLengthNum(huffmanValue);
    return size < 2 ? 2: size;
}

// YのACのhuffmanの値を求める
// x:ZeroNum y:Category
// 0と1だった場合、2桁とする
int getACYHuffmanData(int zeroNum, int category)
{
    int AC_Y_HUFFMAN_TABLE[] = 
    {
        10,0,1,4,11,26,120,248,1014,65410,65411,
        65535,12,27,121,502,2038,65412,65413,65414,65415,65416,
        65535,28,249,1015,4084,65417,65418,65419,65420,65421,65422,
        65535,58,503,4085,65423,65424,65425,65426,65427,65428,65429,
        65535,59,1016,65430,65431,65432,65433,65434,65435,65436,65437,
        65535,122,2039,65438,65439,65440,65441,65442,65443,65444,65445,
        65535,123,4086,65446,65447,65448,65449,65450,65451,65452,65453,
        65535,250,4087,65454,65455,65456,65457,65458,65459,65460,65461,
        65535,504,32704,65462,65463,65464,65465,65466,65467,65468,65469,
        65535,505,65470,65471,65472,65473,65474,65475,65476,65477,65478,
        65535,506,65479,65480,65481,65482,65483,65484,65485,65486,65487,
        65535,1017,65488,65489,65490,65491,65492,65493,65494,65495,65496,
        65535,1018,65497,65498,65499,65500,65501,65502,65503,65504,65505,
        65535,2040,65506,65507,65508,65509,65510,65511,65512,65513,65514,
        65535,65515,65516,65517,65518,65519,65520,65521,65522,65523,65524,
        2041,65525,65526,65527,65528,65529,65530,65531,65532,65533,65534

        /*
        0b1010            ,0b00              ,0b01              ,0b100             ,0b1011            ,0b11010           ,0b1111000         ,0b11111000        ,0b1111110110      ,0b1111111110000010,0b1111111110000011,
        0b1111111111111111,0b1100            ,0b11011           ,0b1111001         ,0b111110110       ,0b11111110110     ,0b1111111110000100,0b1111111110000101,0b1111111110000110,0b1111111110000111,0b1111111110001000,
        0b1111111111111111,0b11100           ,0b11111001        ,0b1111110111      ,0b111111110100    ,0b1111111110001001,0b1111111110001010,0b1111111110001011,0b1111111110001100,0b1111111110001101,0b1111111110001110,
        0b1111111111111111,0b111010          ,0b111110111       ,0b111111110101    ,0b1111111110001111,0b1111111110010000,0b1111111110010001,0b1111111110010010,0b1111111110010011,0b1111111110010100,0b1111111110010101,
        0b1111111111111111,0b111011          ,0b1111111000      ,0b1111111110010110,0b1111111110010111,0b1111111110011000,0b1111111110011001,0b1111111110011010,0b1111111110011011,0b1111111110011100,0b1111111110011101,
        0b1111111111111111,0b1111010         ,0b11111110111     ,0b1111111110011110,0b1111111110011111,0b1111111110100000,0b1111111110100001,0b1111111110100010,0b1111111110100011,0b1111111110100100,0b1111111110100101,
        0b1111111111111111,0b1111011         ,0b111111110110    ,0b1111111110100110,0b1111111110100111,0b1111111110101000,0b1111111110101001,0b1111111110101010,0b1111111110101011,0b1111111110101100,0b1111111110101101,
        0b1111111111111111,0b11111010        ,0b111111110111    ,0b1111111110101110,0b1111111110101111,0b1111111110110000,0b1111111110110001,0b1111111110110010,0b1111111110110011,0b1111111110110100,0b1111111110110101,
        0b1111111111111111,0b111111000       ,0b111111111000000 ,0b1111111110110110,0b1111111110110111,0b1111111110111000,0b1111111110111001,0b1111111110111010,0b1111111110111011,0b1111111110111100,0b1111111110111101,
        0b1111111111111111,0b111111001       ,0b1111111110111110,0b1111111110111111,0b1111111111000000,0b1111111111000001,0b1111111111000010,0b1111111111000011,0b1111111111000100,0b1111111111000101,0b1111111111000110,
        0b1111111111111111,0b111111010       ,0b1111111111000111,0b1111111111001000,0b1111111111001001,0b1111111111001010,0b1111111111001011,0b1111111111001100,0b1111111111001101,0b1111111111001110,0b1111111111001111,
        0b1111111111111111,0b1111111001      ,0b1111111111010000,0b1111111111010001,0b1111111111010010,0b1111111111010011,0b1111111111010100,0b1111111111010101,0b1111111111010110,0b1111111111010111,0b1111111111011000,
        0b1111111111111111,0b1111111010      ,0b1111111111011001,0b1111111111011010,0b1111111111011011,0b1111111111011100,0b1111111111011101,0b1111111111011110,0b1111111111011111,0b1111111111100000,0b1111111111100001,
        0b1111111111111111,0b11111111000     ,0b1111111111100010,0b1111111111100011,0b1111111111100100,0b1111111111100101,0b1111111111100110,0b1111111111100111,0b1111111111101000,0b1111111111101001,0b1111111111101010,
        0b1111111111111111,0b1111111111101011,0b1111111111101100,0b1111111111101101,0b1111111111101110,0b1111111111101111,0b1111111111110000,0b1111111111110001,0b1111111111110010,0b1111111111110011,0b1111111111110100,
        0b11111111001     ,0b1111111111110101,0b1111111111110110,0b1111111111110111,0b1111111111111000,0b1111111111111001,0b1111111111111010,0b1111111111111011,0b1111111111111100,0b1111111111111101,0b1111111111111110
        */
    };
    return AC_Y_HUFFMAN_TABLE[zeroNum * 11 + category];
}

// CのACのhuffmanの値を求める
// x:ZeroNum y:Category
// 0と1だった場合、2桁とする
int getACCHuffmanData(int zeroNum, int category)
{
    int AC_C_HUFFMAN_TABLE[] = 
    {
        0,1,4,10,24,25,56,120,500,1014,4084,
        65535,11,57,246,501,2038,4085,65416,65417,65418,65419,
        65535,26,247,1015,4086,32706,65420,65421,65422,65423,65424,
        65535,27,248,1016,4087,65425,65426,65427,65428,65429,65430,
        65535,58,502,65431,65432,65433,65434,65435,65436,65437,65438,
        65535,59,1017,65439,65440,65441,65442,65443,65444,65445,65446,
        65535,121,2039,65447,65448,65449,65450,65451,65452,65453,65454,
        65535,122,2040,65455,65456,65457,65458,65459,65460,65461,65462,
        65535,249,65463,65464,65465,65466,65467,65468,65469,65470,65471,
        65535,503,65472,65473,65474,65475,65476,65477,65478,65479,65480,
        65535,504,65481,65482,65483,65484,65485,65486,65487,65488,65489,
        65535,505,65490,65491,65492,65493,65494,65495,65496,65497,65498,
        65535,506,65499,65500,65501,65502,65503,65504,65505,65506,65507,
        65535,2041,65508,65509,65510,65511,65512,65513,65514,65515,65516,
        65535,16352,65517,65518,65519,65520,65521,65522,65523,65524,65525,
        1018,32707,65526,65527,65528,65529,65530,65531,65532,65533,65534
        /*
        0b00              ,0b01             ,0b100             ,0b1010            ,0b11000           ,0b11001           ,0b111000          ,0b1111000         ,0b111110100       ,0b1111110110      ,0b111111110100
        0b1111111111111111,0b1011           ,0b111001          ,0b11110110        ,0b111110101       ,0b11111110110     ,0b111111110101    ,0b1111111110001000,0b1111111110001001,0b1111111110001010,0b1111111110001011,
        0b1111111111111111,0b11010          ,0b11110111        ,0b1111110111      ,0b111111110110    ,0b111111111000010 ,0b1111111110001100,0b1111111110001101,0b1111111110001110,0b1111111110001111,0b1111111110010000,
        0b1111111111111111,0b11011          ,0b11111000        ,0b1111111000      ,0b111111110111    ,0b1111111110010001,0b1111111110010010,0b1111111110010011,0b1111111110010100,0b1111111110010101,0b1111111110010110,
        0b1111111111111111,0b111010         ,0b111110110       ,0b1111111110010111,0b1111111110011000,0b1111111110011001,0b1111111110011010,0b1111111110011011,0b1111111110011100,0b1111111110011101,0b1111111110011110,
        0b1111111111111111,0b111011         ,0b1111111001      ,0b1111111110011111,0b1111111110100000,0b1111111110100001,0b1111111110100010,0b1111111110100011,0b1111111110100100,0b1111111110100101,0b1111111110100110,
        0b1111111111111111,0b1111001        ,0b11111110111     ,0b1111111110100111,0b1111111110101000,0b1111111110101001,0b1111111110101010,0b1111111110101011,0b1111111110101100,0b1111111110101101,0b1111111110101110,
        0b1111111111111111,0b1111010        ,0b11111111000     ,0b1111111110101111,0b1111111110110000,0b1111111110110001,0b1111111110110010,0b1111111110110011,0b1111111110110100,0b1111111110110101,0b1111111110110110,
        0b1111111111111111,0b11111001       ,0b1111111110110111,0b1111111110111000,0b1111111110111001,0b1111111110111010,0b1111111110111011,0b1111111110111100,0b1111111110111101,0b1111111110111110,0b1111111110111111,
        0b1111111111111111,0b111110111      ,0b1111111111000000,0b1111111111000001,0b1111111111000010,0b1111111111000011,0b1111111111000100,0b1111111111000101,0b1111111111000110,0b1111111111000111,0b1111111111001000,
        0b1111111111111111,0b111111000      ,0b1111111111001001,0b1111111111001010,0b1111111111001011,0b1111111111001100,0b1111111111001101,0b1111111111001110,0b1111111111001111,0b1111111111010000,0b1111111111010001,
        0b1111111111111111,0b111111001      ,0b1111111111010010,0b1111111111010011,0b1111111111010100,0b1111111111010101,0b1111111111010110,0b1111111111010111,0b1111111111011000,0b1111111111011001,0b1111111111011010,
        0b1111111111111111,0b111111010      ,0b1111111111011011,0b1111111111011100,0b1111111111011101,0b1111111111011110,0b1111111111011111,0b1111111111100000,0b1111111111100001,0b1111111111100010,0b1111111111100011,
        0b1111111111111111,0b11111111001    ,0b1111111111100100,0b1111111111100101,0b1111111111100110,0b1111111111100111,0b1111111111101000,0b1111111111101001,0b1111111111101010,0b1111111111101011,0b1111111111101100,
        0b1111111111111111,0b11111111100000 ,0b1111111111101101,0b1111111111101110,0b1111111111101111,0b1111111111110000,0b1111111111110001,0b1111111111110010,0b1111111111110011,0b1111111111110100,0b1111111111110101,
        0b1111111010      ,0b111111111000011,0b1111111111110110,0b1111111111110111,0b1111111111111000,0b1111111111111001,0b1111111111111010,0b1111111111111011,0b1111111111111100,0b1111111111111101,0b1111111111111110
        */
    };
    return AC_C_HUFFMAN_TABLE[zeroNum * 11 + category];
}

// ACのHuffmanのbit数を取得する
// 最低2bit
int getACHuffmanSize(int huffmanValue)
{
    int size = getBitLengthNum(huffmanValue);
    return size < 2 ? 2: size;
}

#define EOB_ZERONUM  0x0
#define EOB_CATEGORY 0x0
#define ZRL_ZERONUM  0xF
#define ZRL_CATEGORY 0x0